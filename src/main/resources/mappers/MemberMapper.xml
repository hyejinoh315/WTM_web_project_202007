<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">
    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="memberMap" type="com.spring.wtm.model.Member">
		<result property="id"   column="id" />
		<result property="userId"   column="user_id" />
		<result property="userPw"   column="user_pw" />
		<result property="userName"   column="user_name" />
		<result property="email"   column="email" />
		<result property="tel"   column="tel" />
		<result property="postcode"   column="postcode" />
		<result property="address"   column="address" />
		<result property="detailAddress"   column="detail_address" />
		<result property="extraAddress"   column="extra_address" />
        <!-- 회원타입(0관리자 1회원 2카카오회원 9탈퇴회원), IS NULL -->
		<result property="type"   column="type" />
        <result property="loginDate" column="login_date" />
		<result property="regDate"   column="reg_date" />
		<result property="editDate"   column="edit_date" />
		<result property="sessionKey"   column="session_key" />
		<result property="sessionLimit"   column="session_limit" />
    </resultMap>
    
    <!-- 회원 로그인 : 입력값과 일치하는 사용자 정보를 담고 있는 객체를 반환한다. 
    	 로그인 상태유지 및 아이디 저장 유무도 따져서 추후 업데이트 하기. -->
    <select id="login" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
        SELECT * FROM member
        WHERE user_id=#{userId} 
        AND user_pw=md5(#{userPw}) 
        AND type<![CDATA[<]]>8
    </select>
    
    <!-- 중복검사 -->
    <!-- 아이디 중복검사 -->
    <select id="idCheck" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
    	SELECT user_id FROM member WHERE user_id=#{userId}
    </select>
    <!-- 이메일 중복검사 -->
    <select id="emailCheck" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
    	SELECT email FROM member WHERE email=#{email}
    </select>
    <!-- 전화번호 중복검사
    	 아이디와 이메일은 가입 후 수정할 수 없지만 번호는 수정 가능하다.
    	 현재 로그인한 user의 전화번호를 유지하고 수정 버튼을 클릭하면 중복되므로
    	 if문을 통해 로그인한 사용자의 id정보를 가져와서 필터를 넣어준다. -->
    <select id="telCheck" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
    	SELECT tel FROM member WHERE tel=#{tel}
        <if test="userId != null and userId != ''">
        	AND user_id != #{userId}
        </if>
    </select>
    
    <!-- 아이디 찾기 : 가입시 입력한 이름과 이메일을 통해 아이디 조회 -->
    <select id="idFind" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
    	SELECT user_id, reg_date FROM member 
    	WHERE user_name=#{userName} 
    	AND email=#{email} 
    	AND type<![CDATA[<]]>8
    </select>
    	
	<!-- 비밀번호 재발급 : 비밀번호, 시간, 재발급상태, 회원타입 변경! -->
	<update id="pwFind" parameterType="com.spring.wtm.model.Member">
		UPDATE member SET
			user_pw=md5(#{userPw}), edit_date=now(), reissue='Y', type=1
		WHERE user_id=#{userId} 
		AND user_name=#{userName} 
		AND email=#{email} 
		AND type<![CDATA[<]]>9
	</update>
    
    <!-- 로그인 시간 및 재발급상태 N으로 갱신 -->
	<update id="updateLoginDate" parameterType="com.spring.wtm.model.Member">
        UPDATE member SET login_date=now(), reissue='N' WHERE id=#{id}
    </update>    

	<!-- 회원 상세정보 조회 : 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
        SELECT id, user_id, user_pw, user_name, email, tel, postcode, 
        	   address, detail_address, extra_address, type, login_date, 
        	   reg_date, edit_date, session_key, session_limit
        FROM member WHERE id=#{id}
    </select>
	
	<!-- 회원 목록 조회 : 다중행 조회를 위한 기능 정의 -->
    <select id="selectList" parameterType="com.spring.wtm.model.Member" resultMap="memberMap">
        SELECT * FROM member
        
		<where>
        	<if test="userId != null and userId != ''">
        		user_id LIKE #{userId}
        	</if>
            <if test="email != null and email != ''">
                OR email LIKE #{email}
            </if>  
            <if test="tel != null and tel != ''">
                OR tel LIKE #{tel}
            </if>        	
        </where>
        
        ORDER BY id DESC
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    	
    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll" parameterType="com.spring.wtm.model.Member" resultType="int">
		SELECT COUNT(*) FROM member
		        
		<where>
        	<if test="userId != null and userId != ''">
        		user_id LIKE #{userId}
        	</if>
            <if test="email != null and email != ''">
                OR email LIKE #{email}
            </if>  
            <if test="tel != null and tel != ''">
                OR tel LIKE #{tel}
            </if>        	
        </where>
    </select>	
	
	<!-- 회원 가입 : 데이터 저장을 위한 기능 정의
		 PK, 로그인시각, 세션값, 만료시각 X -->
	<insert id="insertItem" parameterType="com.spring.wtm.model.Member" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO member (
 			   user_id, user_pw, user_name, email, tel, postcode, 
        	   address, detail_address, extra_address, type, reg_date, edit_date
		) VALUES (
			#{userId}, md5(#{userPw}), #{userName}, #{email}, #{tel}, #{postcode}, 
			#{address}, #{detailAddress}, #{extraAddress}, #{type}, now(), now()
		)
	</insert>

	<!-- 회원 정보 수정 : 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem" parameterType="com.spring.wtm.model.Member">
		UPDATE member SET 
			user_pw=md5(#{userPw}), user_name=#{userName}, tel=#{tel},
			postcode=#{postcode}, address=#{address}, edit_date=now(), 
			detail_address=#{detailAddress}, extra_address=#{extraAddress}
		WHERE id=#{id}
	</update>
		
	<!-- 회원 탈퇴 : 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem" parameterType="com.spring.wtm.model.Member">
		UPDATE member SET type=9, edit_date=now() WHERE id=#{id};
	</delete>
	
	<!-- 회원 정보 삭제 : 일정기간이 지나면 탈퇴한 회원의 정보를 삭제 -->
	<delete id="dropItem" parameterType="com.spring.wtm.model.Member">
		DELETE FROM member
		WHERE type=9 AND edit_date <![CDATA[<=]]> (CURDATE()-INTERVAL 3 MONTH);
	</delete>
	
	<!-- 회원 정보 수정 : 비밀번호 발급시 일정 시간이 지나면 로그인을 차단
						  비밀번호 재발급이 필요하다 -->
	<update id="pwFind2" parameterType="com.spring.wtm.model.Member">
		UPDATE member SET type=8
		WHERE ((edit_date) <![CDATA[<=]]> (DATE_ADD(now(), INTERVAL -30 MINUTE)))
		AND reissue='Y';
	</update>	
</mapper>