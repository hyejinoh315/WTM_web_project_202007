<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CartMapper">

	<!--  Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다.-->
	<resultMap id="cartMap" type="com.spring.wtm.model.Cart">
		<result property="id" column="id" />
		<result property="img" column="img" />
		<result property="name" column="name" />
		<result property="qty" column="qty" />
		<result property="price2" column="c_price" />
		<result property="sessionId" column="session_id" />
		<result property="regDate" column="reg_date" />
		<result property="editDate" column="edit_date" />
		<result property="memberId" column="member_id" />
		<result property="productId" column="product_id" />
		<result property="price1" column="price" />
		<result property="name2" column="user_name" />
		<result property="tel" column="tel" />
		<result property="email" column="email" />
	</resultMap>
	
	<!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem" 
    	parameterType="com.spring.wtm.model.Cart" 
    	resultMap="cartMap">
    	
        SELECT cart.id, session_id, member_id,  product_id, cart.name, cart.img, price, cart.qty, c_price, cart.reg_date, cart.edit_date
        FROM cart 
        INNER JOIN product ON cart.product_id = product.id
        
		<where>
            <choose>
            	<!-- 로그인했을 경우, 회원 PK 값으로 조회함 -->
                <when test="memberId != 0">
                
                    member_id = #{memberId}
                    
                </when>
                <!-- 비로그인의 경우, 세션 값으로 조회함  -->
                <when test="session_id != null">
                
                    session_id = #{sessionId}
                    
                </when>
            </choose>
        </where>  

    </select>
	
	<!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList" 
    	parameterType="com.spring.wtm.model.Cart" 
    	resultMap="cartMap">
    	
        SELECT cart.id, session_id, member_id, product_id, product.name, product.img, price, cart.qty, c_price, cart.reg_date, cart.edit_date
        FROM cart 
        INNER JOIN product ON cart.product_id = product.id
        
		<where>
            <choose>
            	<!-- 로그인했을 경우, 회원PK 값으로 조회함 -->
                <when test="memberId != 0">
                
                    member_id = #{memberId}
                    
                </when>
                <!-- 비로그인의 경우, 세션 값으로 조회함  -->
                <when test="sessionId != null">
                
                    session_id = #{sessionId}
                    
                </when>
            </choose>
        </where>   

    </select>
    
    
	<!-- 단일행 조회를 위한 기능 정의2 -->
	<select id="selectList2"
		parameterType="com.spring.wtm.model.Cart"
		resultMap="cartMap">
	
		SELECT cart.id, session_id, member_id, member_id, member.user_name, member.tel, member.email, postcode, address, detail_address
		FROM cart
		INNER JOIN member ON member_id = member.id 
			AND member_id = #{memberId} 
		ORDER BY id DESC
		
	</select>
	    
	<!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCountAll" 
    	parameterType="com.spring.wtm.model.Cart" 
    	resultType="int">
    	
        SELECT COUNT(*) FROM cart

    </select>	
    
    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCount" 
    	parameterType="com.spring.wtm.model.Cart" 
    	resultType="int">
    	
        SELECT COUNT(*) FROM cart
        
		<where>
            <choose>
            	<!-- 로그인했을 경우, 회원 PK 값으로 수정함 -->
                <when test="memberId != 0">
                
                    member_id = #{memberId} AND product_id=#{productId}
                    
                </when>
                <!-- 비로그인의 경우, 세션 값으로 수정함  -->
                <when test="sessionId != null">
                
                    session_id = #{sessionId} AND product_id=#{productId}
                    
                </when>
            </choose>
        </where>  
        
    </select>	
    
    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <select id="selectCount2" 
    	parameterType="com.spring.wtm.model.Cart" 
    	resultType="int">
    	
        SELECT COUNT(*) FROM cart WHERE session_id = #{sessionId}

    </select>	
    
    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem" 
    	parameterType="com.spring.wtm.model.Cart" 
    	useGeneratedKeys="true" 
    	keyProperty="id">
    	
    	<choose>
    		<!-- 로그인했을 경우, 회원PK값까지 저장-->
    		<when test="memberId != 0">
    		
    			INSERT INTO cart (
		            id, session_id, member_id, name, img, product_id, c_price, qty, reg_date, edit_date
		        ) VALUES (
		            #{id}, #{sessionId}, #{memberId}, #{name}, #{img}, #{productId}, #{price2}, #{qty}, now(), now()
		        )
		        
    		</when>
    		<!-- 비로그인의 경우, 회원PK값 저장 안함 -->
    		<otherwise>
    			
    			INSERT INTO cart (
		            id, session_id, name, img, product_id, c_price, qty, reg_date, edit_date
		        ) VALUES (
		            #{id}, #{sessionId}, #{name}, #{img}, #{productId}, #{price2}, #{qty}, now(), now()
		        )
    		
    		</otherwise>
    	</choose>

    </insert>
   	
   	<!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" 
    	parameterType="com.spring.wtm.model.Cart">
    	
		DELETE FROM cart
        
        <where>
            <choose>
            	<!-- 장바구니 개별 삭제 -->
            	<!-- 로그인했을 경우, 회원PK값 기준으로 삭제-->
                <when test="memberId != 0">
                
                    AND member_id = #{memberId}
                
                </when>
                <!-- 장바구니 개별 삭제 -->
                <!-- 비로그인의 경우, 세션 값 기준으로 삭제 -->
                <when test="sessionId != null">
                
                    AND session_id = #{sessionId}
                    
                </when>
            </choose>
            <!-- 장바구니 비우기 (전체 삭제) -->
            <!-- 장바구니 비우기 버튼을 클릭했을 경우, 장바구니 id값 기준으로 삭제 -->
            <if test="id != 0">
                
				AND id = #{id}
                    
			</if>
		</where>  
        
    </delete>
    
    <!-- 스케쥴러 데이터 삭제를 위한 기능 정의(장바구니 한달만 저장) -->
    <delete id="deleteItem2" 
    	parameterType="com.spring.wtm.model.Cart">
    	
    	<!-- XML에서는 < 부등호를 TAG로 인식하기 때문에 "The content of elements must consist of well-formed character data or markup."라는 에러가 발생하게 된다. 
    	이와 같은 문제를 해결하기 위해서는 Query안에 사용되고 있는 부등호가 문자열이라것을 의미하게 <![CDATA[  내용  ]]> "으로 감싸준다. -->
    	
		<![CDATA[

		DELETE FROM cart
		WHERE reg_date  <=(CURDATE()-INTERVAL 1 MONTH);
		
		]]>
		
    </delete>
    
    <!-- 데이터 갱신을 위한 기능 정의1 - 같은 상품 담았을 경우 수량/단가*수량 수정 -->
    <update id="updateItem" 
    	parameterType="com.spring.wtm.model.Cart">
    	
        UPDATE cart 
        SET 
        	qty= #{qty} + qty,
            c_price= #{price2} + c_price,
            edit_date=now()
            
        <where>
            <choose>
            	<!-- 로그인했을 경우, 회원 PK 값으로 수정함 -->
                <when test="memberId != 0">
                
                    member_id = #{memberId} AND product_id=#{productId}
                    
                </when>
                <!-- 비로그인의 경우, 세션 값으로 수정함  -->
                <when test="sessionId != null">
                
                    session_id = #{sessionId} AND product_id=#{productId}
                    
                </when>
            </choose>
        </where>  
        
    </update>
    
    <!-- 데이터 갱신을 위한 기능 정의2 - 비회원 장바구니 => 회원 장바구니 유지 -->
    <update id="updateItem2" 
    	parameterType="com.spring.wtm.model.Cart">
    	
        UPDATE cart 
        SET 	member_id = #{memberId},
        		edit_date = now()
        WHERE session_id = #{sessionId}
        
    </update>
    
    <!-- 데이터 갱신을 위한 기능 정의2 -->
    <update id="updateItem3" 
    	parameterType="com.spring.wtm.model.Cart">
    	
        UPDATE cart 
        SET 	qty= #{qty},
            	c_price= #{price2},
            	edit_date=now()
        WHERE id = #{id} 
        
    </update>
    
</mapper>